<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Enhanced Discrete Events System server. Design.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.01 at 25-Jun-2015</releaseinfo>

	<abstract>
	    <simpara>This document collects software desing for Discrete Events System server.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>25-Jun-2015</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist>
	<title>References</title>

	<biblioentry id="ref_rfc_3986"> <abbrev>RFC_3986_URI</abbrev>
	    <productname><ulink url="http://www.ietf.org/rfc/rfc3986.txt"/></productname>
	    <title>RFC 3986: Uniform Resource Identifier (URI): Generic Syntax</title> </biblioentry>

    </bibliolist>


    <glossary> <title>Glossary</title> 

	<glossentry id="gls_cp"><glossterm>CP</glossterm> <acronym>CP</acronym>
	    <glossdef> <para>Connection Point</para> <para>
		    Element that is used as endpoint of connections between systems.  
		    </para></glossdef> </glossentry>

    </glossary>
    
    <sect1 id="ds_apis"> <title>Server APIs</title>
	<sect2 id="ds_apis_intro"><title>Intro</title>
	    <simpara>Server provides access to the model APIs. So server APIs is kind of remote procedure call. Thus server request specifies
		some persistent part of the model, interface exposed by the part, and the interface method to be invoked. 
		It is possible to request the invocation the chain of methods when the preceeding methods return ifcase instance. Actually the iface exposed
		by the part is obtained itself via iface provider iface. But it is generic mechanism, so it makes sense to compact request by using
		specific notation for getting iface itself method. </simpara>
	</sect2>
	<sect2 id="ds_apis_clc"><title>Notation for getting collection of ifaces</title>
	    <simpara>In <xref linkend="ds_apis_intro"/> it was mentioned that it makes sense to use specific notation for getting iface method in
		order to simplify the request notation. Iface provider exposes also method of getting collection of iface instances. What could be 
		notation for this ? There could be several approached. One of them is add support of getting iface by indexes in provider iface. Another
		approach is to use volatile cursor, ref <xref linkend="ds_ctxt_lt"/> </simpara>
	</sect2>
	<sect2><title>Invocation of interfaces method</title>
	    <simpara>Each iface exposed by the models parts has to support virtual methos "exec" that executes the requested method. "Exec" method
	   takes argument "name" - requested method name, and requested method arguments marshalled to string form. </simpara>
	</sect2>
	<sect2><title>Request notation scheme</title>
	    <simpara>Below is EBNF notation of request</simpara>
	    <itemizedlist>
		<listitem>request = cmd , cursor , method </listitem>
		<listitem>cursor = role , ".", handle , [ ("/" , volatile_local_role) | ("#" , volatile_cooperative_role , [":", index]) ]</listitem>
	    </itemizedlist>
	    <simpara>Exampes:</simpara>
	    <itemizedlist>
		<listitem>Getting root node from environment MEnv#1
		    <programlisting>exe MEnv.1 Root</programlisting>
		</listitem>
		<listitem>Getting component "Comp_1" of node 2a3f7 
		    <programlisting>exe MElem.2a3f7 GetNode ./Comp_1</programlisting>
		</listitem>
		<listitem>Getting pair of Vertex local role of MElem 2a3f7
		    <programlisting>exe MElem.2a3f7/MVert Pair</programlisting>
		</listitem>
	    </itemizedlist>
	</sect2>
	<sect2><title>Notation of interface function invocation</title>
	    <simpara>To ensure unified handling of iface method invocation there will be base iface class introduced.</simpara>
	    <simpara>The notation is as:</simpara>
	    <itemizedlist>
		<listitem>method = method_name, ",", method_signature, ["," method_argument]</listitem>
		<listitem>method_argument = method_argument_delimiter, method_argument_body, method_argument_delimiter</listitem>
	    </itemizedlist>
	</sect2>
    </sect1>

    <sect1 id="ds_ctxt"><title>Context</title>
	<sect2 id="ds_ctxt_intro"><title>Intro</title>
	    <simpara>In order to support hierarchical nature of the multiagent model the clients requests have to contain a lot of arguments pointing to 
		the required part of the model. In the other word the client have to localise the part of model to what the request is referred. For 
		instance the part can be specified as: environment, node, interface. Thus the client specifies "cursor" for the request. There could be 
		some approaches of how to specify the cursor. One direct approach is to have the full set of cursor attributes in the request. But 
		this leads to sending a lot of excessive information. Another approach is to set the cursor, i.e. to set the new context for the requests.
		In this case server saves cusrsor attributes for the conext, client sends just context id in its request, server takes the cursor attributes
	       	from the saved context, so no necessity of sending them in request. Normally the context approach
		is implemented by introducing so called "subsession" that keeps context id and adds it to the request, hidding the "internal" staff from the 
		user.</simpara>
	    <simpara>What is context should be combined from? There is just simple requirement for the conext: it has to unambiquosly point to models part
		the request relates to. So the structure of the context depends on implementation of models parts identification, ref <xref linkend="ds_uid"/>.
		For instance if server uniquely indentifies all the parts, so the context can be just the parts UID. But there are problem with implementing
		"totally" unique id. This is because it is needed to get the models part and assosiate UID to it. But some parts of the model are not 
		persistent, for instance iface (role) obtained via cooperative iface provider mechanism can vary depending on the status of agent provided
		this role.
	    </simpara>
	</sect2>
	<sect2><title>Cursor spec syntax</title>
	    <simpara>Cursor spec contains parts_type and parts_handle. parts_type shows to server what interface is supported by the part. parts_handle
	    specifies the instance of the part.</simpara>
	</sect2>
	<sect2 id="ds_ctxt_lt"><title>Cursor life time</title>
	    <simpara>As mentioned in <xref linkend="ds_ctxt_intro"/> there are categories of cursors by the life time:</simpara>
	    <orderedlist>
		<listitem>Persistent
		    <para>For that type of cursor server keeps mapping parts_handle - to - pointer_to_part. So cursor spec contains parts_type and 
			parts_handle. </para>
		</listitem>
		<listitem>Virtual
		    <para> Server doesn't keep mapping to part at all. So actually the cursor doen't 
			specifiy the part (iface) itself but the way of getting the iface. Normally server uses cooperative iface provider to get it.</para>
		</listitem>
		<listitem>Volatile
		    <para>This cursor is valid only during the period of request. Server gets the iface by the cursor and temporarily keeps it. 
			One option is to remove this temporal cursor by special request "close". Another option is that server allows the only context related 
			method. To "close" the context the client needs to send specific request. 
			This type of cursor can be used for instance when interacting to models temporal
			objects like iterators, ref <xref linkend="ds_apis_clc"/></para>
		</listitem>
	    </orderedlist>
	</sect2>
    </sect1>
    <sect1 id="ds_uid"><title>How to uniquely identify remote model part ?</title>
	<sect2><title>Intro</title>
	    <simpara>Client uses unique node identificator in request to server in order to specify what node this request relates to.
		This identificator also is set to nodes proxy, so the proxy includes id in the requests it sends. URi could be uses as UID, but
		URI is not persistent and can be changed in result of remote model mutaions. Another solution would be to use the node handle that
		is generated in scope of client session. In fact UID is used in the scope of the session only, so isn't persistent in the scope of the 
		model itself.</simpara>
	    <simpara>The problems with handle is that actually we need two-derections identification: UID-to-object and object-to-UID. Why do we need both ?
		This is because of it would be convenient to have one-to-one relation. Otherwise the UID-to-object relation map will be increasing any time 
		even if we request the object that already exists within the mapping. For that object the new UID will be generated. So using handles
		required two maps that is resource-intensive.</simpara>
	    <simpara>Looking at URI again we can see that there is the way of making URI unambiguous: using URI canonical form. This way we avoid 
		ambuguous nature of URI. URI gives us object-to-UID relation. Using URI we can avoid dedicated mapping mechanism for UID-to-object:
		models navigation mechanism plays this role.</simpara>
	    <simpara>It also makes sense to consider intermediate variant: each object has API to generate its UID. The UID can be generated from
		canonical URI for example, so is persistent. Another way is to generate random UID on the object construction phase.
		Using generated persistent UID gives us implementation of object-to-UID relation.</simpara>
	</sect2>
    </sect1>
    <sect1 id="ds_pp"><title>How to implement Agents Proxies Provider ?</title>
	<sect2><title>Intro</title>
	    <simpara>The core design idea of Distributed Async Agents (DAA) is to implement the functionality of enviroment distributing via introducing
		specific agents - remote root agents, ref. <ulink url="../../../grayb/doc/design/index.html#ds_daa_proxy_crh_stx_agt_alz"/>. So the philosophy of
		mutliagent system's would be fully supported: new functionality obtained via new agents. This means that the base implmentation "doesn't know"
		of this new functionality. DAA implemetation also includes agents provider supplying remote root agents instances.
		The problem here is that remote root agent have to use agent's proxies to implement interaction between 
		distributed parts of the model. Note that there can be more that one root agent in the sepatate parts of model. According to DAA desing the 
		root agent is the full owner of the proxies it's generated within the scope of model's interaction support.
		The set of the proxies is not pre-determined but extendable. So we need kind of proxies provider that supports
		extention mechanism. There could be more that one way of how to implement this. The options are:</simpara>
	    <orderedlist>
		<listitem><xref linkend="ds_pp_sip"/></listitem>
		<listitem><xref linkend="ds_pp_da"/></listitem>
	    </orderedlist>
	</sect2>
	<sect2 id="ds_pp_sip"><title>Option: Each root agent posesses it's own instance of proxies provider.</title>
	    <simpara>The idea is that there is native implementation of proxies provider (actually factory that supports the plugins). Any root agents
		has to instantiate it's own provider in order to ensure proxies generation. So in result there will be some proxies factory instances in 
		single model part. The extention mechanism in this case would be native plug-ins implemented proxies provider interface.</simpara>
	</sect2>
	<sect2 id="ds_pp_da"><title>Option: Dedicated agent for proxies provider.</title>
	    <simpara>The idea here is to utilize the nature of mutli-agent approach for implementing proxies provider. So we can create dedicated 
		proxies provider agent implementing proxies provider interface. DAA agents provider secure instantiating such agent, so
		the agent will be accessible in the native hierarchy. The extending mechanism can be native plug-ins, as for the option
		<xref linkend="ds_pp_sip"/>.</simpara>
	    <simpara>Another variation of this approach is to have "base" agent for proxy provider. It check its own list of proxies provided but also
		redirec the request to all its children. In this case the extention mechanism can be simple. The supplier of new agent can also deliever
	    the agent for related proxies, the agent has to be inherited from base proxies provider agent.</simpara>
	</sect2>
    </sect1>
    <sect1 id="ds_pacl_id"><title>Proxy approach critical limitation: interactions deadlock</title>
	<sect2><title>Intro</title>
	    <simpara>In Agents proxy approach, <xref linkend="ds_daa_proxy"/> some dedicated agents are used for interacting between models distributed parts.
		These agents are root "down" and "up" agents. The agents owns clients sessions to "remote" model parts. These session are used as master
		session whereas all the lower layer proxies utilise these master sessions, so that proxies can be considered as subsessions.</simpara>
	    <simpara>The problem here is that it's possible to block the interaction in case of "cyclic" request. Let's consider the example. Assume there
		are two part's of model: M1 and M2, M2 is "down" submodel, so the interaction M1-to-M2 are performed via the client session CS1_2 owned by M1 "down" root
		agent. Server SM2 owning M2 has the corresponding server session SS1_2. Correspondingly M2 interacts to M1 via client session CS2_1 owned by 
		M2 root "up" anent, server SM1 owning M1 has server session SS2_1. Let's assume M1 issued the request R1. CS1_2 starts handling this request. Les't
		also assume that R1 in turn causes R2 from M2 to M1 and then in turn R2 causes R3 from M1 to M2. We can see that R3 cannot be handled in the
	scope of this architecture. This is because R3 also is sended to SS1_2 that is blocked by execution of R1.	
	    </simpara>
	</sect2>
    </sect1>
    <sect1 id="ds_tohandle"><title>Traceability: To handle</title>
	<orderedlist>
	</orderedlist>

    </sect1>

</article>
